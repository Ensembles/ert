#version 120
uniform sampler3D grid;
uniform ivec3 grid_size;

vec4 DELTA = vec4(1.0 / grid_size.x, 1.0 / grid_size.y, 1.0 / grid_size.z, 0.0);

varying vec3 normal;

vec4 fetchTexel(sampler3D sampler, vec3 p, vec3 offset) {
    return texture3D(sampler, p + offset);
}

void main() {
    gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;

    vec3 xyz = texture3D(grid, gl_TexCoord[0].xyz).rgb;
    vec4 p = vec4(gl_Vertex);
    p.xyz = xyz;
    //p.z = 1800.0;

    float s01 = fetchTexel(grid, gl_TexCoord[0].xyz, DELTA.xww).z;
    float s21 = fetchTexel(grid, gl_TexCoord[0].xyz, -DELTA.xww).z;
    float s10 = fetchTexel(grid, gl_TexCoord[0].xyz, DELTA.wyw).z;
    float s12 = fetchTexel(grid, gl_TexCoord[0].xyz, -DELTA.wyw).z;

    vec3 va = normalize(vec3(2.0, 0.0, s21 - s01));
    vec3 vb = normalize(vec3(0.0, 2.0, s12 - s10));
    normal = normalize(cross(va, vb));

    //normal = (gl_ModelViewMatrix * vec4(normal, 0.0)).xyz;

    gl_Position = gl_ModelViewProjectionMatrix * p;
}