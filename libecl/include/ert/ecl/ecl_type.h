/*
   Copyright (C) 2017  Statoil ASA, Norway.

   The file 'ecl_type.h' is part of ERT - Ensemble based Reservoir Tool.

   ERT is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   ERT is distributed in the hope that it will be useful, but WITHOUT ANY
   WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE.

   See the GNU General Public License at <http://www.gnu.org/licenses/gpl.html>
   for more details.
*/

#ifndef ERT_ECL_TYPE_H
#define ERT_ECL_TYPE_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdlib.h>
#include <stdbool.h>

/*
  Character data in ECLIPSE files comes as an array of fixed-length
  string. Each of these strings is 8 characters long. The type name,
  i.e. 'REAL', 'INTE', ... , come as 4 character strings.
*/

#define ECL_STRING10_LENGTH 10    // TODO: Remove
#define ECL_STRING8_LENGTH   8
#define ECL_TYPE_LENGTH      4


/*****************************************************************/
/*
   Observe that these type identidiers are (ab)used in both the rms and
   ert/enkf libraries in situations where ECLIPSE is not at all involved.

   Regarding the type ECL_C010_TYPE: In an SMSPEC file generated by IX
   there was a keyword with header:

      NAMES   316   C010

   i.e. the type identifier was the string 'C010'. Have not found any
   further documentation of that type, but assuming it is a 10
   character long string the file loads ok. The ECL_C010_TYPE is
   implemented on a very loose basis it is not clear if the
   ten-character-long-string implementation makes sense, or if that
   just happened to work for the one example we have encountered so
   far. For this reason the support for this keyword type is very
   limited:

     - keywords of this type are not propertly internalized; they are
       just cleanly skipped by ecl_kw/ecl_file implementation when
       loading a file.

     - it is not possible to instantiate a keyword of this type with
       ecl_kw_alloc( ).

     - The type is not exported to Python.
*/

typedef enum {
  ECL_CHAR_TYPE   = 0,
  ECL_FLOAT_TYPE  = 1,
  ECL_DOUBLE_TYPE = 2,
  ECL_INT_TYPE    = 3,
  ECL_BOOL_TYPE   = 4,
  ECL_MESS_TYPE   = 5,
  ECL_C010_TYPE   = 6,   // TODO: Remove
  ECL_STRING_TYPE = 7
} ecl_type_enum;

#define ECL_TYPE_ENUM_DEFS {.value = 0 , .name = "ECL_CHAR_TYPE"}, \
{.value = 1 , .name = "ECL_FLOAT_TYPE"} ,                          \
{.value = 2 , .name = "ECL_DOUBLE_TYPE"},                          \
{.value = 3 , .name = "ECL_INT_TYPE"},                             \
{.value = 4 , .name = "ECL_BOOL_TYPE"},                            \
{.value = 5 , .name = "ECL_MESS_TYPE"},                            \
{.value = 7 , .name = "ECL_STRING_TYPE"}

#define ECL_TYPE_ENUM_SIZE 7



struct ecl_type_struct {
    const ecl_type_enum type;

    // Denotes the number of charachters used to represent
    // the data type in *MEMORY*
    const size_t element_size;
};

typedef struct ecl_type_struct ecl_data_type;


#define ECL_CHAR (ecl_data_type) {.type = ECL_CHAR_TYPE, .element_size = 8+1}
#define ECL_INT (ecl_data_type) {.type = ECL_INT_TYPE, .element_size = sizeof(int)}
#define ECL_FLOAT (ecl_data_type) {.type = ECL_FLOAT_TYPE, .element_size = sizeof(float)}
#define ECL_DOUBLE (ecl_data_type) {.type = ECL_DOUBLE_TYPE, .element_size = sizeof(double)}
#define ECL_BOOL (ecl_data_type) {.type = ECL_BOOL_TYPE, .element_size = sizeof(int)}
#define ECL_MESS (ecl_data_type) {.type = ECL_MESS_TYPE, .element_size = 0}
#define ECL_STRING(size) (ecl_data_type) {.type = ECL_STRING_TYPE, .element_size=size+1}

// TODO: The ECL_C010 macro is to be removed
#define ECL_C010 (ecl_data_type) {.type = ECL_C010_TYPE, .element_size = 10+1}


ecl_data_type      ecl_type_create_from_name(const char *);
ecl_data_type      ecl_type_create(const ecl_type_enum, const size_t);
ecl_data_type      ecl_type_create_from_type(const ecl_type_enum);

ecl_type_enum      ecl_type_get_type(const ecl_data_type);
const char *       ecl_type_get_name(const ecl_data_type);

int                ecl_type_get_sizeof_ctype(const ecl_data_type);
int                ecl_type_get_sizeof_ctype_fortio(const ecl_data_type);

bool               ecl_type_is_equal(const ecl_data_type, const ecl_data_type);

bool               ecl_type_is_numeric(const ecl_data_type);
bool               ecl_type_is_char(const ecl_data_type);
bool               ecl_type_is_int(const ecl_data_type);
bool               ecl_type_is_float(const ecl_data_type);
bool               ecl_type_is_double(const ecl_data_type);
bool               ecl_type_is_mess(const ecl_data_type);
bool               ecl_type_is_bool(const ecl_data_type);
bool               ecl_type_is_C010(const ecl_data_type);
bool               ecl_type_is_string(const ecl_data_type);

#ifdef __cplusplus
}
#endif
#endif
